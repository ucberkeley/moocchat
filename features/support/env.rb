# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'cucumber/rspec/doubles' # to selectively mock/stub in step defs
require 'cucumber/timecop'      # to freeze time in scenarios

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how 
# your application behaves in the production environment, where an error page will 
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
#using phantomJS as headless-js browser
require 'capybara/poltergeist'
Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app, {debug: false})
end
Capybara.javascript_driver = :poltergeist

#
ActionController::Base.allow_rescue = false

# For any scenarios that DO NOT explicitly test authentication, assume logged-in user is an Admin.
Before '~@auth_test' do
  OmniAuth.config.test_mode = true
  OmniAuth.config.mock_auth[:default] = OmniAuth::AuthHash.new( {
    :provider => 'google_oauth2',
      :uid => '12345',
      :info => {
        :name => "Anna Admin",
        :email => 'anna_admin@gmail.com',
        :first_name => 'Anna',
        :last_name => 'Admin'
      }
    })
  create :administrator, :name => 'Anna Admin', :email => 'anna_admin@gmail.com'
  visit '/auth/google_oauth2'
end
After '~@auth_test' do
  Administrator.find_by_email('anna_admin@gmail.com').destroy
  OmniAuth.config.mock_auth.delete(:default)
end

# For scenarios that DO test authentication, tear down their setup after running.
After '@auth_test' do
  OmniAuth.config.mock_auth = {}
end

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  # Default strategy of transaction causes random failures with postgresql and Ubuntu 14.
  # Use safer, slower strategy of truncation.
  DatabaseCleaner.strategy = :truncation
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :transaction

World(FactoryGirl::Syntax::Methods)
